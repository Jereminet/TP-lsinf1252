1) malloc = allocation de mémoire
   calloc = allocation + initialisation à 0 (du coup plus lent)

2) Inutile pcq intialisation qq lignes plus tard avec n->data et n->next

3) Passage par valeur en C. Du coup si appel sans le pointeur, allocation
   beaucoup plus importante de mémoire vu que toute la structure est passée
   en argument.
   Lors de l'appel avec la structure, la copie de cette derniere est stockée
   dans la Stack.
   Lors de l'appel avec le pointeur, c'est donc seulement la copie du pointeur qui est stockée dans la Stack. 
   La structure elle est stockée autre part, cela dépend de l'implémentation.
   On la retrouvera la plupart du temps dans le Heap.

4) Suppression de la variable globale et remplacement de tous les "stack" par l'argument. De manière générale,
   privilégier la passage par argument d'un pointeur, cela permet de créer plusieurs stacks de manière
   dynamique.

