QUESTION 1:
-----------

Sem_wait() demande un pointeur pour pouvoir modifier la valeur de la structure elle-meme et garder une reference vers elle, alors que sans pointeur, on effectue
une copie de la structure et on modifie cette copie et pas la structure elle-meme. La seule chose qui est copiée avec l'utilisation d'un pointeur sont les arguments.

QUESTION 2:
----------

Si la valeur d'initialisation dépasse SEM_VALUE_MAX. Il y en a évidemment d'autres aussi.

QUESTION 3:
-----------

Si sémpahore toujours bloqué après X sec, continue et retourne une erreur.

QUESTION 4:
-----------

Probleme quand empty vaut 0, donc que le buffer est rempli, le consommateur va être bloqué sur l'appel à mutex et ne pourra pas prendre un élément, il va donc y avoir un deadlock.

QUESTION 5:
-----------

Ce ne sont pas des opérations bloquantes, donc ca ne pose pas de réels problèmes, si ce n'est de l'optimisation. Le code est donc correct.

QUESTION 6:
-----------

Possibilité pour plusieurs threads de rentrer dans le if. Ca ne pose pas de réels problèmes, ce que cela changera ce sera juste qu'après que tous les threads soient débloqués, la valeur
à l'intérieur du sémaphore sera supérieur à 0. Ce n'est juste pas ce que l'on demande.

QUESTION 7:
-----------

12 wait() et 13 post(), du coup on passe de 0 à -12 puis à 1 (0-12+13).





Mutex : 1 par 1
Semaphore : plusieurs à la fois

Un mutex est comme un semaphore initialisé a 1.
