/!\ Pour compiler des programmes contenant des threads, il faut rajouter une
commande à la fin de gcc : -lpthread

QUESTION 1:
-----------

Create prend en argument une fonction qui retourne un type void*.Join récupère
cette valeur de retour et remplit une zone mémoire avec cette valeur, et cela
se fait en donnant en argument un pointeur vers un void*, soit un void**. 

QUESTION 2:
-----------

CREATE : Copie de l'adresse en mémoire, initialisation de la zone mémoire
avec les valeurs d'arguments. Si pas de pointeur, l'argument passé en paramètre
est copié et la fonction effectue une modificiation de la
structure mais pas d'accès à la fin de la fonction.
JOIN : Copie de la structure elle-même. Elle n'effectue pas de modifications
donc pas nécessaire d'utiliser un pointeur.

QUESTION 5:
-----------

Ecrit dans la mainpage, sous la section ERRORS.

QUESTION 6:
-----------

pthread_exit() termine le thread.
exit()  termine un processus, donc tous les threads, peu importe où il est
effectué.

QUESTION 7:
-----------

On passe en argument le tableau v qui est stocké dans la stack (variables
locales d'une fonction) ce qui implique que lorsque le thread sera realisé (à
un moment indéterminé, par exemple après la fin de launch), il se peut que la stack ait été vidée et du coup que
le tableau v ait été supprimé. Afin d'éviter cela, il est préférable d'
utiliser un malloc afin de stocker le tableau dans la heap. Mettre le tableau en
variables globales fonctionne également mais n'est pas la méthode recommandée.

int v[] = malloc(sizeof(int)*SIZE); //ou
int *v = malloc(sizeof(int)*SIZE);

Un malloc implique évidemment de free(). Afin d'éviter le même problème
qu'au-dessus, il faut rajouter ces qq lignes à la fin de launch():

pthread_join(mythread,NULL); //permet de s'assurer que le thread est terminé
//Le NULL fait en sorte d'éviter la valeur de retour au lieu de la stocker
//en mémoire
free(v);

QUESTION 8:
-----------

Résultats :
global: 1311012
global: 1384614
global: 1523725
global: 1291945
global: 1327637

Deux threads s'executent à chaque fois, il se peut donc qu'ils fassent appel
exactement au meme temps à func, ce qui fait que la variable commune globale 
n'est en réalité incrémentée qu'une fois, ce qui explique que la valeur finale
de globale soit inférieure à 2*1 000 000.
